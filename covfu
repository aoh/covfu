#!/bin/bash

fail() {
   echo "FAIL: $@"
   exit 1;
}

waitnjobs() {
   while true
   do
      test $(jobs | grep Running | wc -l) -lt $1 && break
      sleep 0.2
   done
}

WORK=""
SAMPLES=""
OUTPUT=""
BLACKLIST=WHITELIST
THREADS=1
SETSIZE=100
TIMEOUT=10
FUZZER=""

USAGE="Usage: covfu --samples <samples-dir> --work <fuzzing-dir> --timeout <timeout($TIMEOUT)> --setsize <setsize($SETSIZE)> --fuzzer <fuzzer-executable> --target <instrumented-target-command> -j <njobs($THREADS)>"

test $# = 0 && echo "$USAGE" && exit 0

while [ $# != 0 ]
do
   case "$1" in
      (--help|-h)
         echo "$USAGE"
         exit 0;;
      (--samples|-s)
         test $# == 1 && fail "$1 needs an argument"
         SAMPLES=$(readlink -f $2)
         test -d "$SAMPLES" || fail "$SAMPLES is not a directory"
         shift 2;;
      (--work|-w)
         test $# == 1 && fail "$1 needs an argument"
         WORK=$(readlink -f $2)
         mkdir -p $WORK || fail "cannot write to $WORK"
         shift 2;;
      (--command|-c)
         test $# == 1 && fail "$1 needs an argument"
         COMMAND="$2"
         shift 2;;
      (--timeout|-t)
         test $# == 1 && fail "$1 needs an argument"
         TIMEOUT=$2
         shift 2;;
      (--jobs|-j)
         test $# == 1 && fail "$1 needs an argument"
         THREADS=$2
         shift 2;;
      (--setsize|-n)
         test $# == 1 && fail "$1 needs an argument"
         SETSIZE=$2
         shift 2;;
      (--fuzzer|-f)
         test $# == 1 && fail "$1 needs an argument"
         FUZZER=$2
         test -x "$FUZZER" || fail "$FUZZER is not executable"
         shift 2;;
      (*)
         # what this flag?
         echo "WTF '$1'"
         exit 1;;
   esac
done

test -n "$FUZZER" || { test -x /usr/bin/radamsa && FUZZER=/usr/bin/radamsa || FUZZER=$WORK/bin/radamsa; }
test -n "$WORK" || fail "You need to give a work directory with --work. This is where needed tools, data and results will be put. You can use the same one across runs."
test -n "$COMMAND" || fail "You need to give a target command with --target"
echo "$COMMAND" | grep -q "TESTCASE" || fail "command needs to contain the string TESTCASE, to be replaced with testcase file name"
test -d "$SAMPLES" || fail "You need to give a samples directory"
test $(ls $samples | wc -l) = 0 && touch $SAMPLES/tabularasa.file


mkdir -p $WORK
cd $WORK
mkdir -p bin src fuzz/next fuzz/new issues

OL=$WORK/bin/ol
LINES=$WORK/bin/lines

test -x /usr/bin/ol && OL=/usr/bin/ol
test -x /usr/bin/lines && LINES=/usr/bin/lines

echo "Checking and possibly building tools on the first run. This may take a few minutes."
test -x $OL || ( cd src; git clone https://github.com/aoh/owl-lisp.git && cd owl-lisp && make PREFIX=$WORK install; )
echo " - $OL"
test -x $FUZZER || ( cd src; git clone https://github.com/aoh/radamsa && cd radamsa && make OL=$OL PREFIX=$WORK install; ) &
echo " - $FUZZER"
test -x $LINES || ( cd src; git clone https://github.com/aoh/lines && cd lines && make OL=$OL PREFIX=$WORK install; ) &
echo " - $LINES"
wait
SUFFIX=$(ls $SAMPLES | head -n 1 | sed -e 's/.*\.//')

PATH=$WORK/bin:$PATH

echo "SAMPLES=$SAMPLES"
echo "TARGET=$TARGET"
echo "WORK=$WORK"
echo "SUFFIX=$SUFFIX"
echo "THREADS=$THREADS"


##
## Import and sanitize sample paths to work folder
##

for foo in $SAMPLES/*
do
   SUM=`md5sum $foo | sed -e 's/ .*//'`
   cp -v "$foo" "fuzz/$SUM.$SUFFIX"
done


##
## Test loop
##

# fuzz some new files based on current files (initially samples)
# compute coverages of old and new files
# take a good subset of files which cover the whole set
# rinse and repeat

cd $WORK/fuzz


START=$($OL -e '(time-ms)')
TESTS=0
RATE=0

while true
do

   $FUZZER -o new/fuzz-%n.$SUFFIX -n $SETSIZE *.$SUFFIX &

   ## Compute missing coverages
   for foo in *.$SUFFIX
   do
      test -f $foo.coverage && continue
      # do this in parallel soonish
      (ulimit -t $TIMEOUT;
       mkdir $foo.dir;
       cp $foo $foo.dir;
       cd $foo.dir;
       CMD=$(echo $COMMAND | sed -e "s/TESTCASE/$foo/")
       ASAN_OPTIONS=detect_leaks=0:coverage=1 $CMD "$foo" 2>"../$foo.asan" > /dev/null &
       PID=$!;
       wait;
       #sancov.py unpack *.packed &>/dev/null
       for LOG in *.$PID.sancov
       do
         NAME=$(echo $LOG | sed -e 's/\..*//')
         od -w4 -t x4 $LOG  | sed -e "s/.* /$NAME-/" | grep $NAME >> "../$foo.coverage"
       done;
       cd ..;
       ) &
       waitnjobs $THREADS
   done
   wait
   chmod -R u+rwx fuzz-*.dir
   rm -rf *.dir

   ## Check for issues
   for log in $(grep "ERROR: Addr" *.asan | sed -e 's/:.*//' | uniq)
   do
      FILE=$(echo $log | sed -e 's/\.asan//')
      CAUSE=$(grep "ERROR: Addr" $log | head -n 1 | sed -re 's/.*ERROR: AddressSanitizer: ([^ ]*).*pc [^ ]*([^ ]{3}).*/\1_\2/' | sed -e 's/[^a-zA-Z0-9_-]/_/g')
      cp $FILE ../issues/$CAUSE.$SUFFIX
      cp $log ../issues/$CAUSE.$SUFFIX.asan
   done

   ## Compute the next generation to fuzz/next
   for foo in $($LINES --cover *.coverage)
   do
      FILE=$(echo "$foo" | sed -e 's/\.coverage$//')
      mv "$foo" "$FILE" next
   done

   ## Clear old generation
   rm *.*

   ## Sanitize the names of next generation files (to avoid collisions)
   cd next
   # rename and move files from current generation
   for file in fuzz-*.$SUFFIX 
   do
      echo "$file" | grep -q "\*" && break # no matches
      SUM=`md5sum $file | sed -e 's/ .*//'` 
      mv "$file" "../$SUM.$SUFFIX" 
      mv "$file.coverage" "../$SUM.$SUFFIX.coverage" 
   done
   # move files form previous generation
   for file in *.$SUFFIX
   do
      mv $file $file.coverage ..
   done
   cd ..
  
   POOLSIZE=$(ls *.$SUFFIX | wc -l)

   mv new/* .

   TESTS=$($OL -e "(+ $SETSIZE $TESTS)")
   RATE=$($OL -e "(round (/ (- (time-ms) $START) $TESTS))")

   echo "$(date +'%Y.%m.%d %H:%M') $TESTS cases tested (${RATE}ms/test), $($LINES --union *.coverage | wc -l) blocks, $(ls ../issues/*.$SUFFIX 2>/dev/null | wc -l) issues found, pool size $POOLSIZE for '$COMMAND'"

done


